curve(dgamma(x, alpha+lambda, beta), add=TRUE, lwd=3, lty=3, col="burntorange")
alpha <- 3
beta <- 2
kappa <- 1
x <- regamma(10000, alpha, beta, kappa)
hist(x, freq=FALSE, breaks=40, main=expression(paste(kappa, " = 1")))
curve(degamma(x, alpha, beta, kappa), add=TRUE, lwd=3, col="orange")
curve(dgamma(x, alpha, beta), add=TRUE, lwd=3, col="dodgerblue")
curve(dgamma(x, alpha+1, beta), add=TRUE, lwd=3, col="firebrick")
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
curve(dgamma(x, alpha+lambda, beta), add=TRUE, lwd=3, lty=3, col="sienna")
alpha <- 3
beta <- 2
kappa <- 1
x <- regamma(10000, alpha, beta, kappa)
hist(x, freq=FALSE, breaks=40, main=expression(paste(kappa, " = 1")))
curve(degamma(x, alpha, beta, kappa), add=TRUE, lwd=3, col="orange")
curve(dgamma(x, alpha, beta), add=TRUE, lwd=3, col="dodgerblue")
curve(dgamma(x, alpha+1, beta), add=TRUE, lwd=3, col="firebrick")
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
curve(dgamma(x, alpha+lambda, beta), add=TRUE, lwd=3, lty=3, col="sienna")
legend("topright", c(expression(paste("Gamma(", alpha, ", ", beta, ")"))), lwd=3, col='dodgerblue)
alpha <- 3
beta <- 2
kappa <- 1
x <- regamma(10000, alpha, beta, kappa)
hist(x, freq=FALSE, breaks=40, main=expression(paste(kappa, " = 1")))
curve(degamma(x, alpha, beta, kappa), add=TRUE, lwd=3, col="orange")
curve(dgamma(x, alpha, beta), add=TRUE, lwd=3, col="dodgerblue")
curve(dgamma(x, alpha+1, beta), add=TRUE, lwd=3, col="firebrick")
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
curve(dgamma(x, alpha+lambda, beta), add=TRUE, lwd=3, lty=3, col="sienna")
legend("topright", c(expression(paste("Gamma(", alpha, ", ", beta, ")"))), lwd=3, col='dodgerblue')
alpha <- 3
beta <- 2
kappa <- 1
x <- regamma(10000, alpha, beta, kappa)
hist(x, freq=FALSE, breaks=40, main=expression(paste(kappa, " = 1")))
curve(degamma(x, alpha, beta, kappa), add=TRUE, lwd=3, col="orange")
curve(dgamma(x, alpha, beta), add=TRUE, lwd=3, col="dodgerblue")
curve(dgamma(x, alpha+1, beta), add=TRUE, lwd=3, col="firebrick")
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
curve(dgamma(x, alpha+lambda, beta), add=TRUE, lwd=3, lty=3, col="sienna")
legend("topright", c(expression(paste("Gamma(", alpha, ", ", beta, ")")),
expression(paste("Gamma(", alpha, "+1, ", beta, ")")),
expression(paste("Gamma(", alpha, "+", lambda, ", ", beta, ")")),
expression(paste("IMGa(", alpha, ", ", beta, ", ", kappa, ")"))),
lwd=3, lty=c(1, 1, 3, 1), col=c("dodgerblue", "firebrick", "sienna", "orange"))
alpha <- 3
beta <- 2
kappa_vec <- c(0.1, 1, 5, 10)
par(mfrow=c(2,2))
for(k in seq_along(kappa_vec)){
kap <- kappa_vec[k]
x <- regamma(10000, alpha, beta, kap)
hist(x, freq=FALSE, breaks=40, main=expression(paste(kappa, " = 1")))
curve(degamma(x, alpha, beta, kappa), add=TRUE, lwd=3, col="orange")
curve(dgamma(x, alpha, beta), add=TRUE, lwd=3, col="dodgerblue")
curve(dgamma(x, alpha+1, beta), add=TRUE, lwd=3, col="firebrick")
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
curve(dgamma(x, alpha+lambda, beta), add=TRUE, lwd=3, lty=3, col="sienna")
legend("topright", c(expression(paste("Gamma(", alpha, ", ", beta, ")")),
expression(paste("Gamma(", alpha, "+1, ", beta, ")")),
expression(paste("Gamma(", alpha, "+", lambda, ", ", beta, ")")),
expression(paste("IMGa(", alpha, ", ", beta, ", ", kappa, ")"))),
lwd=3, lty=c(1, 1, 3, 1), col=c("dodgerblue", "firebrick", "sienna", "orange"))
}
alpha <- 3
beta <- 2
kappa_vec <- c(0.1, 1, 5, 10)
par(mfrow=c(2,2))
for(k in seq_along(kappa_vec)){
kap <- kappa_vec[k]
x <- regamma(10000, alpha, beta, kap)
hist(x, freq=FALSE, breaks=40, main=expression(paste(kappa, " = ", kap)))
curve(degamma(x, alpha, beta, kap), add=TRUE, lwd=3, col="orange")
curve(dgamma(x, alpha, beta), add=TRUE, lwd=3, col="dodgerblue")
curve(dgamma(x, alpha+1, beta), add=TRUE, lwd=3, col="firebrick")
w <- beta^-alpha/(beta^-alpha - (beta + kap)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
curve(dgamma(x, alpha+lambda, beta), add=TRUE, lwd=3, lty=3, col="sienna")
legend("topright", c(expression(paste("Gamma(", alpha, ", ", beta, ")")),
expression(paste("Gamma(", alpha, "+1, ", beta, ")")),
expression(paste("Gamma(", alpha, "+", lambda, ", ", beta, ")")),
expression(paste("IMGam(", alpha, ", ", beta, ", ", kappa, ")"))),
lwd=3, lty=c(1, 1, 3, 1), col=c("dodgerblue", "firebrick", "sienna", "orange"))
}
alpha <- 3
beta <- 2
kappa_vec <- c(0.1, 1, 5, 10)
par(mfrow=c(2,2))
for(k in seq_along(kappa_vec)){
kap <- kappa_vec[k]
x <- regamma(10000, alpha, beta, kap)
hist(x, freq=FALSE, breaks=40, main=expression(paste(kappa, " = ", kap)))
curve(degamma(x, alpha, beta, kap), add=TRUE, lwd=3, col="orange")
curve(dgamma(x, alpha, beta), add=TRUE, lwd=3, col="dodgerblue")
curve(dgamma(x, alpha+1, beta), add=TRUE, lwd=3, col="firebrick")
w <- beta^-alpha/(beta^-alpha - (beta + kap)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
curve(dgamma(x, alpha+lambda, beta), add=TRUE, lwd=3, lty=3, col="sienna")
legend("topright", c(expression(paste("Gamma(", alpha, ", ", beta, ")")),
expression(paste("Gamma(", alpha, "+1, ", beta, ")")),
expression(paste("Gamma(", alpha, "+", lambda, ", ", beta, ")")),
expression(paste("IMGam(", alpha, ", ", beta, ", ", kappa, ")"))),
lwd=3, lty=c(1, 1, 3, 1), col=c("dodgerblue", "firebrick", "sienna", "orange"))
}
library(quack)
knitr::opts_chunk$set(echo = TRUE)
library(quack)
regamma <- function(n, alpha, beta, kappa, ...){
if(length(n) > 1) n <- length(n)
u <- runif(n)
x <- qegamma(u, alpha, beta, kappa, ...)
return(x)
}
degamma <- function(x, alpha, beta, kappa, log=FALSE){
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
d <- w*dgamma(x, alpha, beta) + (1-w)*dgamma(x, alpha, beta + kappa)
if(log){
return(log(d))
}else{
return(d)
}
}
knitr::opts_chunk$set(echo = TRUE)
library(quack)
regamma <- function(n, alpha, beta, kappa, ...){
if(length(n) > 1) n <- length(n)
u <- runif(n)
x <- qegamma(u, alpha, beta, kappa, ...)
return(x)
}
pegamma <- function(q, alpha, beta, kappa, log=FALSE, lower.tail=TRUE){
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
p <- w*pgamma(q, alpha, beta) + (1-w)*pgamma(q, alpha, beta + kappa)
p <- p + (1 - 2*p)*(1-lower.tail)
if(log){
return(log(p))
}else{
return(p)
}
}
qegamma <- function(p, alpha, beta, kappa, ...){
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
l <- pmin(qgamma(p, alpha, beta), 0)
u <- qgamma(1 - (1-p)/w, alpha, beta)
f2opt <- function(zz, pp) (pegamma(zz, alpha, beta, kappa) - pp)^2
q <- rep(NA, length(p))
for(i in seq_along(p)){
if(p[i] <= 0){
q[i] <- 0
}else{
if(p[i] > 1){
q[i] <- 1
}else{
q[i] <- optim((l[i]+u[i])/2, fn=f2opt,
method="Brent", lower=l[i], upper = u[i],
pp = p[i], ...)$par
}
}
}
return(q)
}
degamma <- function(x, alpha, beta, kappa, log=FALSE){
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
d <- w*dgamma(x, alpha, beta) + (1-w)*dgamma(x, alpha, beta + kappa)
if(log){
return(log(d))
}else{
return(d)
}
}
alpha <- 3
beta <- 2
kappa_vec <- c(0.1, 1, 5, 10)
par(mfrow=c(2,2))
for(k in seq_along(kappa_vec)){
kap <- kappa_vec[k]
x <- regamma(10000, alpha, beta, kap)
hist(x, freq=FALSE, breaks=40, main=paste(expression(paste(kappa, " = ")), kap))
curve(degamma(x, alpha, beta, kap), add=TRUE, lwd=3, col="orange")
curve(dgamma(x, alpha, beta), add=TRUE, lwd=3, col="dodgerblue")
curve(dgamma(x, alpha+1, beta), add=TRUE, lwd=3, col="firebrick")
w <- beta^-alpha/(beta^-alpha - (beta + kap)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
curve(dgamma(x, alpha+lambda, beta), add=TRUE, lwd=3, lty=3, col="sienna")
legend("topright", c(expression(paste("Gamma(", alpha, ", ", beta, ")")),
expression(paste("Gamma(", alpha, "+1, ", beta, ")")),
expression(paste("Gamma(", alpha, "+", lambda, ", ", beta, ")")),
expression(paste("IMGam(", alpha, ", ", beta, ", ", kappa, ")"))),
lwd=3, lty=c(1, 1, 3, 1), col=c("dodgerblue", "firebrick", "sienna", "orange"))
}
library(GBASS)
?qbass
motorcyle
mcycle
MASS::motorcycle
1e3
?Density
?density
K = 2
kappa = 0.75
epsilon=1e-5
max_iter=2000
verbose=TRUE
print_iter=10
crit=NULL
minibatch=nrow(X)
X <- rgamma(100, 3, 1.4)
X <- matrix(rgamma(100, 3, 1.4), ncol=1)
X
minibatch = nrow(X)
minibatch
if(length(epsilon) == 1){
epsilon <- rep(epsilon, length(K))
}
if(length(epsilon) != length(K)){
stop("epsilon should be either scalar or a vector of length = length(K)")
}
if(minibatch < nrow(X)){
if(max(epsilon) > -Inf){
warning("Stochastic EM algorithm with minibatching ignores epsilon. Set epsilon = -Inf to ignore this message")
epsilon <- rep(-Inf, length(K))
}
warning("Minibatch version of EM does not seem to work at this point. ")
}
out <- list()
cnt <- 1
-Inf > -Inf
k = 1
K
k = 2
if(verbose){
cat("Number of components:", k)
}
N_comp <- k
# Initialize model
SX <- cov(X)
a_n <- function(n, kap=0.75) n^(-kap)
pi <- (tmp <- runif(N_comp))/sum(tmp)
mu <- sigma <- list()
for(j in 1:N_comp){
mu[[j]]    <- X[sample(nrow(X), 1),]
sigma[[j]] <- rWishart(1, df=ncol(X)+2, SX)[,,1]
}
sigma
mu
n <- nrow(X)
p <- N_comp
d <- nrow(SX)
pi_ij <- matrix(0, nrow=n, ncol=p)
iter <- 1
tol <- Inf
log_lik <- rep(NA, max_iter)
eps0 <- epsilon[which(K==k)]
tol
tol > eps0 & iter < max_iter
sub_samp <- sample(n, minibatch, replace=FALSE)
#E-STEP
for(i in sub_samp){
for(j in 1:p){
xi <- X[i,]
pi_ij[i,j] <- pi[j] * dmvnorm(as.numeric(xi), as.numeric(mu[[j]]), sigma[[j]])
}
}
library(mvtnorm)
#E-STEP
for(i in sub_samp){
for(j in 1:p){
xi <- X[i,]
pi_ij[i,j] <- pi[j] * dmvnorm(as.numeric(xi), as.numeric(mu[[j]]), sigma[[j]])
}
}
as.numeric(mu[[1]])
p
sigma[[j]]
as.matrix(sigma[[j]])
as.matrix(matrix(runif(4), ncol=2))
(matrix(runif(4), ncol=2))
matrix(matrix(runif(4), ncol=2))
as.matrix(matrix(runif(4), ncol=2))
pi_ij[i,j] <- pi[j] * dmvnorm(as.numeric(xi), as.numeric(mu[[j]]), as.matrix(sigma[[j]]))
while(tol > eps0 & iter < max_iter){
sub_samp <- sample(n, minibatch, replace=FALSE)
#E-STEP
for(i in sub_samp){
for(j in 1:p){
xi <- X[i,]
pi_ij[i,j] <- pi[j] * dmvnorm(as.numeric(xi), as.numeric(mu[[j]]), as.matrix(sigma[[j]]))
}
}
for(i in sub_samp){
pi_ij[i,] <- pi_ij[i,]/sum(pi_ij[i,])
}
# M-STEP
Sj <- list()
for(j in 1:p){
tmp <- matrix(0, nrow=d, ncol=d)
for(i in sub_samp){
xi <- X[i,]
tmp <- tmp + pi_ij[i,j]*tcrossprod(xi - mu[[j]])
}
Sj[[j]] <- tmp
}
#Update component probabilities
pi <- apply(pi_ij[sub_samp,], 2, mean)
#Update covariance matrices
for(j in 1:p){
sigma[[j]] <- (2*a_n(n, kappa)*SX + Sj[[j]])/(2*a_n(n, kappa) + n*pi[j])
}
#Update mean vectors
for(j in 1:p){
tmp <- 0
for(i in sub_samp){
xi <- X[i,]
tmp <- tmp + pi_ij[i,j]*xi
}
mu[[j]] <- tmp/(minibatch*pi[j])
}
#Compute log likelihood
log_lik[iter] <- log(n) - log(minibatch)
for(i in sub_samp){
tmp <- 0
xi <- X[i,]
for(j in 1:p){
tmp <- tmp + pi[j]*dmvnorm(xi, mu[[j]], sigma[[j]])
}
log_lik[iter] <- log_lik[iter] + log(tmp)
}
if((iter %% print_iter) == 0){
if(verbose)
cat("\nIteration:", iter, ", tol:", tol, ", log-lik:", log_lik[iter])
}
if(iter > 1){
tol <- log_lik[iter] - log_lik[iter - 1]
}
iter <- iter + 1
}
foo <- mvn_mix(X, K=1:10)
foo <- quack::mvn_mix(X, K=1:10)
document()
devtools::document()
library(devtools)
document()
document()
document()
document()
foo <- quack::mvn_mix(X, K=1:10)
document()
foo <- quack::mvn_mix(X, K=1:10)
names(foo)
foo
length(foo)
obj <- foo[[2]]
obj$pi
p <- length(obj$pi)
indx <- sample(n, p, obj$pi)
indx <- sample(n, p, replace=TRUE, obj$pi)
?sample
indx <- sample(p, n, replace=TRUE, obj$pi)
indx
table(indx)
rmvnorm(30,
mean=obj$mean[[indx[i]]],
as.matrix(obj$sigma[[indx[i]]]))
rmvnorm(30,
mean=obj$mu[[indx[i]]],
as.matrix(obj$sigma[[indx[i]]]))
for(i in 1:30) rmvnorm(1,
mean=obj$mu[[indx[i]]],
as.matrix(obj$sigma[[indx[i]]]))
for(i in 1:1000) rmvnorm(1,
mean=obj$mu[[indx[i]]],
as.matrix(obj$sigma[[indx[i]]]))
indx
obj <- foo[[5]]
p <- length(obj$pi)
indx <- sample(p, n, replace=TRUE, obj$pi)
res <- matrix(NA, nrow=n, ncol=p)
indx
table(indx)
p
n
n <- 1000
i = 1
j <- which(indx == i)
j
length(j)
cnt <- 0
max(cnt) + 1:length(j)
cnt
res[cnt,] <- rmvnorm(length(j),
mean=obj$mu[[i]],
as.matrix(obj$sigma[[i]]))
i = 2
j <- which(indx == i)
cnt <- max(cnt) + 1:length(j)
cnt
cnt
j
cnt <- 0
i = 1
j <- which(indx == i)
cnt <- max(cnt) + 1:length(j)
cnt
i = 2
j <- which(indx == i)
cnt <- max(cnt) + 1:length(j)
cnt
res <- matrix(NA, nrow=n, ncol=p)
cnt <- 0
for(i in 1:p){
j <- which(indx == i)
if(length(j) > 0){
cnt <- max(cnt) + 1:length(j)
res[cnt,] <- rmvnorm(length(j),
mean=obj$mu[[i]],
as.matrix(obj$sigma[[i]]))
}
}
res
length(indx)
n
n <- 1000
p <- length(obj$pi)
indx <- sample(p, n, replace=TRUE, obj$pi)
res <- matrix(NA, nrow=n, ncol=p)
cnt <- 0
for(i in 1:p){
j <- which(indx == i)
if(length(j) > 0){
cnt <- max(cnt) + 1:length(j)
res[cnt,] <- rmvnorm(length(j),
mean=obj$mu[[i]],
as.matrix(obj$sigma[[i]]))
}
}
res
cov(res)
dim(res)
sigma
obj$mu[[1]]
obj$sigma[[1]]
p <- length(obj$mu[[1]])
p
p <- length(obj$mu[[1]])
L <- length(obj$pi)
indx <- sample(L, n, replace=TRUE, obj$pi)
res <- matrix(NA, nrow=n, ncol=p)
cnt <- 0
for(i in 1:L){
j <- which(indx == i)
if(length(j) > 0){
cnt <- max(cnt) + 1:length(j)
res[cnt,] <- rmvnorm(length(j),
mean=obj$mu[[i]],
as.matrix(obj$sigma[[i]]))
}
}
res
# Shuffle indices
res <- res[sample(n,n,FALSE),]
rmvn_mix <- function(n, obj){
p <- length(obj$mu[[1]])
L <- length(obj$pi)
indx <- sample(L, n, replace=TRUE, obj$pi)
res <- matrix(NA, nrow=n, ncol=p)
cnt <- 0
for(i in 1:L){
j <- which(indx == i)
if(length(j) > 0){
cnt <- max(cnt) + 1:length(j)
res[cnt,] <- rmvnorm(length(j),
mean=obj$mu[[i]],
as.matrix(obj$sigma[[i]]))
}
}
# Shuffle indices
res <- res[sample(n,n,FALSE),]
return(res)
}
rmvn_mix(foo[[5]])
hist(rmvn_mix(1000, foo[[5]]))
hist(rmvn_mix(1000, foo[[5]]), freq=F)
curve(dgamma(x, 3, 1.4))
hist(rmvn_mix(1000, foo[[5]]), freq=F)
curve(dgamma(x, 3, 1.4), add=TRUE)
dmvn_mix <- function(x, obj, log=FALSE){
n <- length(x)
p <- length(obj$mu[[1]])
L <- length(obj$pi)
res <- matrix(0, nrow=n, ncol=p)
for(i in 1:n){
for(j in 1:L){
res[i] <- res[i] + obj$pi[j]*dmvnorm(x[i],
obj$mu[[j]],
as.matrix(obj$sigma[[j]]))
}
}
return(res)
}
dmvn_mix(2, obj)
dmvn_mix(seq(0, 6, by=0.2), obj)
document()
?dmvn_mix
library(quack)
