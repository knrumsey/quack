shape[d] <- dims[d]
margin_array <- array(margin, dim = shape)
expected <- expected * margin_array
expected
margin_array
dim(margin_array)
dim(expected)
# Step 2: Build expected counts under full independence
expected <- array(1, dim = dims)
for (d in 1:D) {
margin <- marginals[[d]] / N  # Convert to proportions
# Build array with singleton dimensions except for d-th
margin_dims <- rep(1, D)
margin_dims[d] <- length(margin)
margin_array <- array(margin, dim = margin_dims)
# Multiply across expected (R broadcasts along singleton dimensions correctly here)
expected <- expected * margin_array
}
d=1
margin <- marginals[[d]] / N  # Convert to proportions
# Build array with singleton dimensions except for d-th
margin_dims <- rep(1, D)
margin_dims[d] <- length(margin)
margin_array <- array(margin, dim = margin_dims)
margin_array
dim(expected)
# Step 2: Build expected counts under full independence
expected <- array(1, dim = dims)
for (d in 1:D) {
margin <- marginals[[d]] / N  # marginal proportions
# Create an array of correct shape with 1s everywhere except along d-th dimension
margin_dims <- rep(1, D)
margin_dims[d] <- length(margin)
margin_array <- array(margin, dim = margin_dims)
# Now replicate across the full array shape
reps <- dims
reps[d] <- 1  # keep only 1 along margin axis
margin_array <- array(rep(margin_array, times = reps), dim = dims)
# Multiply in
expected <- expected * margin_array
}
reps
margin_dims
margin_dims
# Step 2: Build expected counts under full independence
expected <- array(1, dim = dims)
for (d in 1:D) {
margin_array <- array(1, dim = dims)
index_list <- vector("list", D)
for (i in 1:D) {
if (i == d) {
index_list[[i]] <- 1:dims[d]
} else {
index_list[[i]] <- 1
}
}
margin_array <- do.call(`[<-`, c(list(margin_array), index_list, list(value = marginals[[d]] / N)))
expected <- expected * margin_array
}
expected <- expected * N
expected
dim(expected)
dim(observed)
#' @export
Gtest <- function(arr, df=NA){
dims <- dim(arr)
D <- length(dims)
N <- sum(arr)
if(is.na(df)){
df <- prod(dims-1)
if(df <= 0){
stop("degrees of freedom must be positive")
}
}
# Perform G-test
# Get marginal totals
marginals <- lapply(1:D, function(d) apply(arr, d, sum))
# Step 2: Build expected counts under full independence
expected <- array(1, dim = dims)
for (d in 1:D) {
margin_array <- array(1, dim = dims)
index_list <- vector("list", D)
for (i in 1:D) {
if (i == d) {
index_list[[i]] <- 1:dims[d]
} else {
index_list[[i]] <- 1
}
}
margin_array <- do.call(`[<-`, c(list(margin_array), index_list, list(value = marginals[[d]] / N)))
expected <- expected * margin_array
}
expected <- expected * N
# Step 3: Compute G-statistic, safely handling 0s
observed <- arr
mask <- observed > 0
Gstatistic <- 2 * sum(observed[mask] * log(observed[mask] / expected[mask]))
# Step 4: Compute p-value
pvalue <- pchisq(Gstatistic, df = df, lower.tail = FALSE)
# Return object
out <- list(G=Gstatistic, pval=pvalue)
return(out)
}
Gtest(arr)
expected
arr
expected/N
expected
# Step 2: Build expected counts under full independence
expected <- array(1, dim = dims)
for (d in 1:D) {
margin_array <- array(1, dim = dims)
index_list <- vector("list", D)
for (i in 1:D) {
if (i == d) {
index_list[[i]] <- 1:dims[d]
} else {
index_list[[i]] <- 1
}
}
margin_array <- do.call(`[<-`, c(list(margin_array), index_list, list(value = marginals[[d]] / N)))
expected <- expected * margin_array
}
expected
2*3*4 - 2 - 3 - 4 +2
prod(dims-1)
dims
prod(dims-1)
arr
margials
marginals
2*3 - 2 - 3
+1
dims
prod(dims) - sum(dims-1) - 1
dims = c(2,3)
prod(dims) - sum(dims-1) - 1
dims = c(2,7)
prod(dims) - sum(dims-1) - 1
dims = c(3,7)
prod(dims) - sum(dims-1) - 1
dims
arr
arr[c(1,2,3)]
arr[[c(1,2,3)]]
total_cells <- prod(dims)
dims = dim(arr)
dims
expected <- rep(NA, total_cells)
expected
indices <- arrayInd(i, .dim=dims)
i
indices
i = 1
arrayInd(i, .dim=dims)
arrayInd(2, .dim=dims)
arrayInd(3, .dim=dims)
arrayInd(4, .dim=dims)
dims
arrayInd(5, .dim=dims)
arrayInd(6, .dim=dims)
?arrayInd
expected <- array(NA, dim=dims)
expected
expected <- array(NA, dim=dims)
for(i in 1:total_cells){
indices <- arrayInd(i, .dim=dims)
numerator <- 1
for(d in 1:D){
numerator <- numerator * marginals[[d]][indices[d]]
}
E_ind <-  numerator / N^(D-1)
do.call("[<-", c(list(expected), as.list(indices), list(value = E_ind)))
}
expected
i
numerator <- 1
for(d in 1:D){
numerator <- numerator * marginals[[d]][indices[d]]
}
numerator
E_ind <-  numerator / N^(D-1)
E_ind
do.call("[<-", c(list(expected), as.list(indices), list(value = E_ind)))
for(i in 1:total_cells){
indices <- arrayInd(i, .dim=dims)
numerator <- 1
for(d in 1:D){
numerator <- numerator * marginals[[d]][indices[d]]
}
E_ind <-  numerator / N^(D-1)
expected <- do.call("[<-", c(list(expected), as.list(indices), list(value = E_ind)))
}
expected
total_cells
total_cells <- prod(dims)
total_cells
total_cells <- prod(dims)
expected <- array(NA, dim=dims)
for(i in 1:total_cells){
indices <- arrayInd(i, .dim=dims)
numerator <- 1
for(d in 1:D){
numerator <- numerator * marginals[[d]][indices[d]]
}
E_ind <-  numerator / N^(D-1)
expected <- do.call("[<-", c(list(expected), as.list(indices), list(value = E_ind)))
}
# Compute G-statistico
observed <- arr
expected
min(expected)
# Compute G-statistico
observed <- arr
mask <- observed > 0
Gstatistic <- 2 * sum(observed[mask] * log(observed[mask] / expected[mask]))
Gstatistic
df
df <- prod(dims) - sum(dims-1) - 1
df
# Step 4: Compute p-value
pvalue <- pchisq(Gstatistic, df = df, lower.tail = FALSE)
pvalue
Gtest
Gtest(arr)
#' @export
Gtest <- function(arr, df=NA){
dims <- dim(arr)
D <- length(dims)
N <- sum(arr)
if(is.na(df)){
df <- prod(dims) - sum(dims-1) - 1
if(df <= 0){
stop("degrees of freedom must be positive")
}
}
# Get marginal totals
marginals <- lapply(1:D, function(d) apply(arr, d, sum))
total_cells <- prod(dims)
expected <- array(NA, dim=dims)
#Loop over cells
for(i in 1:total_cells){
indices <- arrayInd(i, .dim=dims)
#Calculate expected counts
numerator <- 1
for(d in 1:D){
numerator <- numerator * marginals[[d]][indices[d]]
}
E_ind <-  numerator / N^(D-1)
expected <- do.call("[<-", c(list(expected), as.list(indices), list(value = E_ind))) # Multi-indexing
}
if(min(expected) <= 0){
stop("cannot have expected counts be <= 0. Check for level with no observations.")
}
# Compute G-statistico
observed <- arr
mask <- observed > 0
Gstatistic <- 2 * sum(observed[mask] * log(observed[mask] / expected[mask]))
# Step 4: Compute p-value
pvalue <- pchisq(Gstatistic, df = df, lower.tail = FALSE)
# Return object
out <- list(G=Gstatistic, pval=pvalue)
return(out)
}
Gtest(arr)
data_2d <- cbind(rpois(3, 1), rpois(3, 1), rpois(3, 1))
fisher.test(data_2d)
chisq.test(data_2d)
Gtest(data_2d)
?chisq.test
?fisher.test
fisher.test(data_2d, alternative="greater")
fisher.test(data_2d, alternative="greater)
chisq.test(data_2d)
Gtest(data_2d)
""
"
data_2d <- cbind(rpois(3, 1), rpois(3, 1), rpois(3, 1))
fisher.test(data_2d, alternative="greater")
chisq.test(data_2d)
Gtest(data_2d)
data_2d <- cbind(rpois(3, 1), rpois(3, 1), rpois(3, 1))
fisher.test(data_2d, alternative="greater")
chisq.test(data_2d)
Gtest(data_2d)
arr = data_2d
dims <- dim(arr)
D <- length(dims)
N <- sum(arr)
if(is.na(df)){
df <- prod(dims) - sum(dims-1) - 1
if(df <= 0){
stop("degrees of freedom must be positive")
}
}
df
D
dims
N
data_2d <- cbind(rpois(3, lambda=10), rpois(3, lambda=10), rpois(3, lambda=10))
fisher.test(data_2d, alternative="greater")
chisq.test(data_2d)
Gtest(data_2d)
data_3d <- array(rpois(2*3*4, lambda=10), dim=c(2,3,4))
Gtest(data)
@export
#' @export
Gtest <- function(arr, df=NA){
dims <- dim(arr)
D <- length(dims)
N <- sum(arr)
if(is.na(df)){
df <- prod(dims) - sum(dims-1) - 1
if(df <= 0){
stop("degrees of freedom must be positive")
}
}
# Get marginal totals
marginals <- lapply(1:D, function(d) apply(arr, d, sum))
total_cells <- prod(dims)
expected <- array(NA, dim=dims)
#Loop over cells
for(i in 1:total_cells){
indices <- arrayInd(i, .dim=dims)
#Calculate expected counts
numerator <- 1
for(d in 1:D){
numerator <- numerator * marginals[[d]][indices[d]]
}
E_ind <-  numerator / N^(D-1)
expected <- do.call("[<-", c(list(expected), as.list(indices), list(value = E_ind))) # Multi-indexing
}
if(min(expected) <= 0){
stop("cannot have expected counts be <= 0. Check for level with no observations.")
}
# Compute G-statistico
observed <- arr
mask <- observed > 0
Gstatistic <- 2 * sum(observed[mask] * log(observed[mask] / expected[mask]))
# Step 4: Compute p-value
pvalue <- pchisq(Gstatistic, df = df, lower.tail = FALSE)
# Return object
out <- list(G=Gstatistic, pval=pvalue)
return(out)
}
#' @export
Gtest <- function(arr, df=NA){
dims <- dim(arr)
D <- length(dims)
N <- sum(arr)
if(is.na(df)){
df <- prod(dims) - sum(dims-1) - 1
if(df <= 0){
stop("degrees of freedom must be positive")
}
if(N <= df){
warning("N is less than df")
}
}
# Get marginal totals
marginals <- lapply(1:D, function(d) apply(arr, d, sum))
total_cells <- prod(dims)
expected <- array(NA, dim=dims)
#Loop over cells
for(i in 1:total_cells){
indices <- arrayInd(i, .dim=dims)
#Calculate expected counts
numerator <- 1
for(d in 1:D){
numerator <- numerator * marginals[[d]][indices[d]]
}
E_ind <-  numerator / N^(D-1)
expected <- do.call("[<-", c(list(expected), as.list(indices), list(value = E_ind))) # Multi-indexing
}
if(min(expected) <= 0){
warning("cannot have expected counts be <= 0. Check for level with no observations.")
}
# Compute G-statistico
observed <- arr
mask <- observed > 0
Gstatistic <- 2 * sum(observed[mask] * log(observed[mask] / expected[mask]))
# Step 4: Compute p-value
pvalue <- pchisq(Gstatistic, df = df, lower.tail = FALSE)
# Return object
out <- list(G=Gstatistic, pval=pvalue)
return(out)
}
data_2d
data_2d <- cbind(rpois(3, lambda=1), rpois(3, lambda=1), rpois(3, lambda=1))
fisher.test(data_2d, alternative="greater")
chisq.test(data_2d)
Gtest(data_2d)
data_2d <- cbind(rpois(3, lambda=1), rpois(3, lambda=1), rpois(3, lambda=1))
fisher.test(data_2d, alternative="greater")
chisq.test(data_2d)
Gtest(data_2d)
data_2d <- cbind(rpois(3, lambda=1), rpois(3, lambda=1), rpois(3, lambda=1))
fisher.test(data_2d, alternative="greater")
chisq.test(data_2d)
Gtest(data_2d)
arr = data_2d
arr
dims <- dim(arr)
D <- length(dims)
N <- sum(arr)
if(is.na(df)){
df <- prod(dims) - sum(dims-1) - 1
if(df <= 0){
stop("degrees of freedom must be positive")
}
if(N <= df){
warning("N is less than df")
}
}
df
dims
N
if(is.na(df)){
df <- prod(dims) - sum(dims-1) - 1
if(df <= 0){
stop("degrees of freedom must be positive")
}
if(N <= df){
warning("N is less than df")
}
}
warnings()
if(is.na(df)){
df <- prod(dims) - sum(dims-1) - 1
if(df <= 0){
stop("degrees of freedom must be positive")
}
if(N <= df){
stop("N is less than df")
}
}
df
prod(dims) - sum(dims-1) - 1
df
df <- prod(dims) - sum(dims-1) - 1
df
N
if(is.na(df)){
df <- prod(dims) - sum(dims-1) - 1
if(df <= 0){
stop("degrees of freedom must be positive")
}
if(N <= df){
stop("N is less than df")
}
}
warnings()
d
df
N
# Get marginal totals
marginals <- lapply(1:D, function(d) apply(arr, d, sum))
total_cells <- prod(dims)
expected <- array(NA, dim=dims)
#Loop over cells
for(i in 1:total_cells){
indices <- arrayInd(i, .dim=dims)
#Calculate expected counts
numerator <- 1
for(d in 1:D){
numerator <- numerator * marginals[[d]][indices[d]]
}
E_ind <-  numerator / N^(D-1)
expected <- do.call("[<-", c(list(expected), as.list(indices), list(value = E_ind))) # Multi-indexing
}
expected
min(expected)
Gtest(data_2d)
data_2d <- cbind(rpois(3, lambda=10), rpois(3, lambda=10), rpois(3, lambda=10))
fisher.test(data_2d, alternative="greater")
chisq.test(data_2d)
Gtest(data_2d)
devtools::document()
data_2d <- cbind(rpois(3, lambda=10), rpois(3, lambda=10), rpois(3, lambda=10))
fisher.test(data_2d, alternative="greater")
test1 <- fisher.test(data_2d, alternative="greater")
test2 <- chisq.test(data_2d)
test3 <- Gtest(data_2d)
NSIMS <- 1000
cnt1 <- cnt2 <- cnt3 <- 0
for(i in 1:NSIMS){
data_2d <- cbind(rpois(3, lambda=10), rpois(3, lambda=10), rpois(3, lambda=10))
test1 <- fisher.test(data_2d, alternative="greater")
if(test1$p.value < 0.1) cnt1 <- cnt1 + 1
test2 <- chisq.test(data_2d)
if(test2$p.value < 0.1) cnt2 <- cnt2 + 1
test3 <- Gtest(data_2d)
if(test3$pval < 0.1) cnt3 <- cnt3 + 1
}
cnt1/NSIMS
cnt2/NSIMS
cnt3/NSIMS
warnings()
NSIMS <- 10000
cnt1 <- cnt2 <- cnt3 <- 0
for(i in 1:NSIMS){
data_2d <- cbind(rpois(3, lambda=10), rpois(3, lambda=10), rpois(3, lambda=10))
test1 <- fisher.test(data_2d, alternative="greater")
if(test1$p.value < 0.1) cnt1 <- cnt1 + 1
test2 <- chisq.test(data_2d)
if(test2$p.value < 0.1) cnt2 <- cnt2 + 1
test3 <- Gtest(data_2d)
if(test3$pval < 0.1) cnt3 <- cnt3 + 1
}
cnt1/NSIMS
cnt2/NSIMS
cnt3/NSIMS
