# Calculate non-conformity scores
alpha <- abs(y_train - yhat)/(beta + exp(mu))
alpha
hist(alpha)
quantile(alpha, 0.95)
abline(quantile(alpha, 0.95))
abline(v=quantile(alpha, 0.95))
conf=0.95
alpha_s <- quantile(alpha, conf)
alpha_s
plot(y, yhat)
plot(y, yhat_oob)
?BASS::bass
?randomForest
#' @return An object with class "rfok"
#' @examples
#'
#' X <- matrix(runif(150), nrow=50, ncol=3)
#' y <- apply(X, 1, duqling::ishigami)
#' fit <- rfok(X, y)
#'
#' Xnew <- matrix(runif(150), nrow=50, ncol=3)
#' predict(fit, Xnew)
#' @export
rfok <- function(X, y, k=5, beta=sd(y)/30, ...){
n <- nrow(X)
# Fit RF model
fit <- randomForest::randomForest(X_train, y, keep.inbag=TRUE, ...)
# Get predictions
preds <- predict(fit, newdata=X_train, predict.all=TRUE)
yhat <- preds$aggregate
preds <- preds$individual
# Get out of bag predictions
out_of_bag_sets <- apply(fit$inbag, 1, function(xx) which(xx==0))
yhat_oob <- rep(NA, n)
for(i in 1:n){
yhat_oob[i] <- mean(preds[i, out_of_bag_sets[[i]]])
}
# Get k nearest neighbors for each point
neighbors <- RANN::nn2(X_train, X_train, k=min(k, nrow(X_train)))$nn.idx
# Estimate the mus
mu <- rep(NA, n)
for(i in 1:n){
ind <- neighbors[i,]
mu[i] <- log(mean(abs(y_train[ind] - yhat_oob[ind])))
}
# Calculate non-conformity scores
alpha <- abs(y_train - yhat_oob)/(beta + exp(mu))
#alpha_s <- quantile(alpha, conf)
# Return object
object <- list(fit=fit, k=k, beta=beta, alpha=alpha, X=X, y=y)
return(object)
}
fit <- rfok(X, y)
class(fit)
names(fit)
class(object) <- "rfok"
# Return object
object <- list(fit=fit, k=k, beta=beta, alpha=alpha, X=X, y=y)
class(object) <- "rfok"
#' @return An object with class "rfok"
#' @examples
#'
#' X <- matrix(runif(150), nrow=50, ncol=3)
#' y <- apply(X, 1, duqling::ishigami)
#' fit <- rfok(X, y)
#'
#' Xnew <- matrix(runif(150), nrow=50, ncol=3)
#' predict(fit, Xnew)
#' @export
rfok <- function(X, y, k=5, beta=sd(y)/30, ...){
n <- nrow(X)
# Fit RF model
fit <- randomForest::randomForest(X_train, y, keep.inbag=TRUE, ...)
# Get predictions
preds <- predict(fit, newdata=X_train, predict.all=TRUE)
yhat <- preds$aggregate
preds <- preds$individual
# Get out of bag predictions
out_of_bag_sets <- apply(fit$inbag, 1, function(xx) which(xx==0))
yhat_oob <- rep(NA, n)
for(i in 1:n){
yhat_oob[i] <- mean(preds[i, out_of_bag_sets[[i]]])
}
# Get k nearest neighbors for each point
neighbors <- RANN::nn2(X_train, X_train, k=min(k, nrow(X_train)))$nn.idx
# Estimate the mus
mu <- rep(NA, n)
for(i in 1:n){
ind <- neighbors[i,]
mu[i] <- log(mean(abs(y_train[ind] - yhat_oob[ind])))
}
# Calculate non-conformity scores
alpha <- abs(y_train - yhat_oob)/(beta + exp(mu))
#alpha_s <- quantile(alpha, conf)
# Return object
object <- list(fit=fit, k=k, beta=beta, alpha=alpha, X=X, y=y)
class(object) <- "rfok"
return(object)
}
fit <- rfok(X, y)
class(fit)
?duqling::run_sim_study
newdata = lhs::randomLHS(300, 3)
preds <- predict(object$fit, newdata)
class(object$fit)
length(fit)
# Fit RF model
fit <- randomForest::randomForest(X_train, y, keep.inbag=TRUE, ...)
fit <- randomForest::randomForest(X, y, keep.inbag=TRUE
)
class(fit)
# Return object
object <- list(fit=fit, k=k, beta=beta, alpha=alpha, X=X, y=y)
class(object) <- "rfok"
preds <- predict(object$fit, newdata)
preds
length(preds)
length(0.95)
seq_along(0.95)
seq_along(NULL)
paste(0.95)
paste(c(0.8, 0.9, 0.95))
gsub("\\.", "_", paste(c(0.8, 0.9, 0.95)))
moe <- matrix(NA, nrow=length(pred), ncol=length(conf))
colnames(moe) <- gsub("\\.", "_", paste(conf))
pred <- predict(object$fit, newdata)
if(is.null(conf)){
return(pred)
}
moe <- matrix(NA, nrow=length(pred), ncol=length(conf))
colnames(moe) <- gsub("\\.", "_", paste(conf))
moe
# Return object
object <- list(fit=fit, k=k, beta=beta, alpha=alpha, oob_error=yhat_oob-y, X=X)
object$fit
# Get nearest neighbors and estimate mu's
neighbors <- RANN::nn2(X, X, k=min(k, nrow(X)))$nn.idx
# Get nearest neighbors and estimate mu's
neighbors <- RANN::nn2(object$X, newdata, k=min(k, nrow(X)))$nn.idx
neighbors
dim(neighbors)
range(neighbors)
n <- length(pred)
# Estimate mus
mu <- rep(NA, n)
y = y_train
# Return object
object <- list(fit=fit, k=k, beta=beta, alpha=alpha, oob_error=yhat_oob-y, X=X)
object$oob_error
moe <- matrix(NA, nrow=length(pred), ncol=length(conf))
colnames(moe) <- gsub("\\.", "_", paste(conf))
for(i in seq_along(conf)){
moe[,i] <- quantile(object$alpha, conf[i])*(exp(mu[i] + object$beta))
}
moe
head(moe)
for(i in seq_along(conf)){
moe[,i] <- quantile(object$alpha, conf[i])*(exp(mu[i] + object$beta))
}
i
moe
quantile(object$alpha, conf[i])
(exp(mu[i] + object$beta))
# Estimate mus
mu <- rep(NA, n)
for(i in 1:n){
ind <- neighbors[i,]
mu[i] <- mean(abs(object$oob_error[ind]))
}
(exp(mu[i] + object$beta)
)
for(i in seq_along(conf)){
moe[,i] <- quantile(object$alpha, conf[i])*(exp(mu[i] + object$beta))
}
moe
ts.plot(moe)
neighbors[1,]
neighbors[2,]
neighbors[3,]
oob_error
object$oob_error
mean(abs(object$oob_error[ind]))
ind
mu <- rep(NA, n)
for(i in 1:n){
ind <- neighbors[i,]
mu[i] <- mean(abs(object$oob_error[ind]))
}
mu
moe <- matrix(NA, nrow=length(pred), ncol=length(conf))
colnames(moe) <- gsub("\\.", "_", paste(conf))
for(i in seq_along(conf)){
moe[,i] <- quantile(object$alpha, conf[i])*(mu[i] + object$beta)
}
moe
moe[1] - moe[2]
(mu[i] + object$beta)
m
mu
moe <- matrix(NA, nrow=length(pred), ncol=length(conf))
colnames(moe) <- gsub("\\.", "_", paste(conf))
for(i in seq_along(conf)){
moe[,i] <- quantile(object$alpha, conf[i])*(mu + object$beta)
}
moe
curve(quantile(object$alpha, x))
quantile(object$alpha, 0.95)
alpha_s = quantile(object$alpha, 0.95)
(sum(object$alpha < alpha_s) +1)/(1+length(object$alpha))
U <- runif(1)
ss <- quantile(object$alpha, U)
ss
U
delta <- runif(1000, -1, 1)
hist((1-delta)/2)
delta <- runif(1)
sign  <- rbinom(1, 1, 0.5)*2 - 1
sign
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
rbinom(1, 1, 0.5)*2 - 1
zzz <- rep(NA, 5000)
for(i in 1:5000){
delta <- runif(1)
sign  <- rbinom(1, 1, 0.5)*2 - 1
zzz[i] <- mu + sign*quantile(object$alpha, delta)
}
warnings()
mu <- 5
zzz <- rep(NA, 5000)
for(i in 1:5000){
delta <- runif(1)
sign  <- rbinom(1, 1, 0.5)*2 - 1
zzz[i] <- mu + sign*quantile(object$alpha, delta)
}
zzz
hist(zz)
hist(zzz)
curve(qnorm(x, 0, 1))
alpha
mean(alpha)
sd(alpha)
curve(qnorm(x, 0.042, 0.064))
curve(quantile(object$alpha, x), add=T, col='red')
zzz <- rep(NA, 5000)
for(i in 1:5000){
delta <- runif(1)
sign  <- rbinom(1, 1, 0.5)*2 - 1
#zzz[i] <- mu + sign*quantile(object$alpha, delta)
zzz[i] <- mu + sign*qnorm(delta, mean(object$alpha, sd(object$alpha)))
}
hist(zzz)
hist(zzz, freq=F)
curve(dnorm(x), mean(object$alpha), sd(object$alpha))
hist(zzz, freq=F)
curve(dnorm(x), mean(object$alpha), sd(object$alpha), add=T, col='red')
curve(dnorm(x), 5 + mean(object$alpha), sd(object$alpha), add=T, col='red')
curve(dnorm(x, 5 + mean(object$alpha), sd(object$alpha), add=T, col='red'))
curve(dnorm(x, 5 + mean(object$alpha), sd(object$alpha)), add=T, col='red')
zzz <- rep(NA, 5000)
for(i in 1:5000){
delta <- runif(1)
sign  <- rbinom(1, 1, 0.5)*2 - 1
#zzz[i] <- mu + sign*quantile(object$alpha, delta)
zzz[i] <- mu + sign*qnorm(delta, mean(object$alpha), sd(object$alpha))
}
hist(zzz, freq=F)
curve(dnorm(x, 5 + mean(object$alpha), sd(object$alpha)), add=T, col='red')
zzz <- rep(NA, 5000)
for(i in 1:5000){
delta <- runif(1)
sign  <- rbinom(1, 1, 0.5)*2 - 1
#zzz[i] <- mu + sign*quantile(object$alpha, delta)
zzz[i] <- mu + qnorm(delta, mean(object$alpha), sd(object$alpha))
}
hist(zzz, freq=F)
curve(dnorm(x, 5 + mean(object$alpha), sd(object$alpha)), add=T, col='red')
quantile(object$alpha, delta)
quantile(object$alpha, 0)
?khaos::predict.adaptive_khaos
?khaos::predict.sparse_khaos
?BASS::predict.bass
predict.rfok <- function(object, newdata, conf=0.95, samples=NULL, ...){
pred <- predict(object$fit, newdata)
n <- length(pred)
if(is.null(conf) & is.null(samples)){
return(pred)
}
# Get nearest neighbors
neighbors <- RANN::nn2(object$X, newdata, k=min(k, nrow(X)))$nn.idx
# Estimate mus
mu <- rep(NA, n)
for(i in 1:n){
ind <- neighbors[i,]
mu[i] <- mean(abs(object$oob_error[ind]))
}
if(is.null(samples)){
# Generate predictions and confidence intervals
moe <- matrix(NA, nrow=length(pred), ncol=length(conf))
colnames(moe) <- gsub("\\.", "_", paste(conf))
for(i in seq_along(conf)){
moe[,i] <- quantile(object$alpha, conf[i])*(mu + object$beta)
}
out <- list(pred=pred, moe=moe)
return(out)
}else{
# Generate predictive samples
preds <- matrix(NA, nrow=n, ncol=samples)
for(i in 1:n){
delta <- runif(samples)
signs <- rbinom(samples, 1, 0.5)*2 - 1
preds[i,] <- pred[i] + sign*quantile(object$alpha, delta)
}
}
return(preds)
}
X <- lhs::randomLHS(1000, 3)
y <- apply(X, 1, duqling::ishigami)
rfok <- function(X, y, k=5, beta=sd(y)/30, ...){
n <- nrow(X)
# Fit RF model
fit <- randomForest::randomForest(X, y, keep.inbag=TRUE, ...)
# Get predictions
preds <- predict(fit, newdata=X, predict.all=TRUE)
yhat <- preds$aggregate
preds <- preds$individual
# Get out of bag predictions
out_of_bag_sets <- apply(fit$inbag, 1, function(xx) which(xx==0))
yhat_oob <- rep(NA, n)
for(i in 1:n){
yhat_oob[i] <- mean(preds[i, out_of_bag_sets[[i]]])
}
# Get k nearest neighbors for each point
neighbors <- RANN::nn2(X, X, k=min(k, nrow(X)))$nn.idx
# Estimate the mus
mu <- rep(NA, n)
for(i in 1:n){
ind <- neighbors[i,]
mu[i] <- mean(abs(y[ind] - yhat_oob[ind]))
}
# Calculate non-conformity scores
alpha <- abs(y - yhat_oob)/(mu + beta)
#alpha_s <- quantile(alpha, conf)
# Return object
object <- list(fit=fit, k=k, beta=beta, alpha=alpha, oob_error=yhat_oob-y, X=X)
class(object) <- "rfok"
return(object)
}
predict.rfok <- function(object, newdata, conf=0.95, samples=NULL, ...){
pred <- predict(object$fit, newdata)
n <- length(pred)
if(is.null(conf) & is.null(samples)){
return(pred)
}
# Get nearest neighbors
neighbors <- RANN::nn2(object$X, newdata, k=min(k, nrow(X)))$nn.idx
# Estimate mus
mu <- rep(NA, n)
for(i in 1:n){
ind <- neighbors[i,]
mu[i] <- mean(abs(object$oob_error[ind]))
}
if(is.null(samples)){
# Generate predictions and confidence intervals
moe <- matrix(NA, nrow=length(pred), ncol=length(conf))
colnames(moe) <- gsub("\\.", "_", paste(conf))
for(i in seq_along(conf)){
moe[,i] <- quantile(object$alpha, conf[i])*(mu + object$beta)
}
out <- list(pred=pred, moe=moe)
return(out)
}else{
# Generate predictive samples
preds <- matrix(NA, nrow=n, ncol=samples)
for(i in 1:n){
delta <- runif(samples)
signs <- rbinom(samples, 1, 0.5)*2 - 1
preds[i,] <- pred[i] + sign*quantile(object$alpha, delta)
}
}
return(preds)
}
X <- lhs::randomLHS(1000, 3)
y <- apply(X, 1, duqling::ishigami)
fit <- rfok(X, y)
Xnew <- lhs::randomLHS(300, 3)
ynew <- apply(Xnew, 1, duqling::ishigami)
preds <- predict(fit, Xnew)
predict.rfok <- function(object, newdata, conf=0.95, samples=NULL, ...){
pred <- predict(object$fit, newdata)
n <- length(pred)
if(is.null(conf) & is.null(samples)){
return(pred)
}
# Get nearest neighbors
neighbors <- RANN::nn2(object$X, newdata, k=min(object$k, nrow(X)))$nn.idx
# Estimate mus
mu <- rep(NA, n)
for(i in 1:n){
ind <- neighbors[i,]
mu[i] <- mean(abs(object$oob_error[ind]))
}
if(is.null(samples)){
# Generate predictions and confidence intervals
moe <- matrix(NA, nrow=length(pred), ncol=length(conf))
colnames(moe) <- gsub("\\.", "_", paste(conf))
for(i in seq_along(conf)){
moe[,i] <- quantile(object$alpha, conf[i])*(mu + object$beta)
}
out <- list(pred=pred, moe=moe)
return(out)
}else{
# Generate predictive samples
preds <- matrix(NA, nrow=n, ncol=samples)
for(i in 1:n){
delta <- runif(samples)
signs <- rbinom(samples, 1, 0.5)*2 - 1
preds[i,] <- pred[i] + sign*quantile(object$alpha, delta)
}
}
return(preds)
}
preds <- predict(fit, Xnew)
dim(preds)
preds
class(preds)
length(preds)
names(preds)
preds$moe
preds <- predict(fit, Xnew, samples=1000)
quantile(object$alpha, delta)
predict.rfok <- function(object, newdata, conf=0.95, samples=NULL, ...){
pred <- predict(object$fit, newdata)
n <- length(pred)
if(is.null(conf) & is.null(samples)){
return(pred)
}
# Get nearest neighbors
neighbors <- RANN::nn2(object$X, newdata, k=min(object$k, nrow(X)))$nn.idx
# Estimate mus
mu <- rep(NA, n)
for(i in 1:n){
ind <- neighbors[i,]
mu[i] <- mean(abs(object$oob_error[ind]))
}
if(is.null(samples)){
# Generate predictions and confidence intervals
moe <- matrix(NA, nrow=length(pred), ncol=length(conf))
colnames(moe) <- gsub("\\.", "_", paste(conf))
for(i in seq_along(conf)){
moe[,i] <- quantile(object$alpha, conf[i])*(mu + object$beta)
}
out <- list(pred=pred, moe=moe)
return(out)
}else{
# Generate predictive samples
preds <- matrix(NA, nrow=n, ncol=samples)
for(i in 1:n){
delta <- runif(samples)
signs <- rbinom(samples, 1, 0.5)*2 - 1
preds[i,] <- pred[i] + signs*quantile(object$alpha, delta)
}
}
return(preds)
}
preds <- predict(fit, Xnew, samples=1000)
dim(pres)
dim(preds)
plot(ynew, apply(preds, 1, mean))
devtools::document()
(mu + object$beta)
devtools::document()
library(duqling)
rkof_pred <- function(obj, X) predict.rkof(obj, X, samples=1000)
run_sim_study(rkof, rkof_pred, fnames=c("ishigami", "borehole", n_train=500, replications=5))
run_sim_study(quack::rkof, rkof_pred, fnames=c("ishigami", "borehole", n_train=500, replications=5))
run_sim_study(quack::rfok, rkof_pred, fnames=c("ishigami", "borehole", n_train=500, replications=5))
rkof_pred <- function(obj, X) predict.rfok(obj, X, samples=1000)
run_sim_study(quack::rfok, rkof_pred, fnames=c("ishigami", "borehole", n_train=500, replications=5))
devtools::document()
run_sim_study(quack::rfok, rkof_pred, fnames=c("ishigami", "borehole", n_train=500, replications=5))
rfok_pred <- function(obj, X) rfok.predict(obj, X, samples=1000)
run_sim_study(quack::rfok, rkof_pred, fnames=c("ishigami", "borehole"), n_train=200, replications=5)
devtools::document()
devtools::document()
library(quack)
