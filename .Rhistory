N <- min(nx, ny)
D <- rep(NA, n_mc)
z <- matrix(NA, nrow=N, ncol=p)
n_mc=10
D <- rep(NA, n_mc)
z <- matrix(NA, nrow=N, ncol=p)
z
ind <- sample(c(rep(1, nx), rep(2, ny)), size=N,
replace=FALSE,
prob=c(rep(lambda/nx, nx),
rep((1-lambda)/ny, ny)))
lambda = 05
lambda = 0.5
ind <- sample(c(rep(1, nx), rep(2, ny)), size=N,
replace=FALSE,
prob=c(rep(lambda/nx, nx),
rep((1-lambda)/ny, ny)))
ind
sample(x, 3)
x
ind <- sample(seq(1, nx+ny), size=N,
replace=FALSE,
prob=c(rep(lambda/nx, nx),
rep((1-lambda)/ny, ny)))
ind
cbind(x, y)
rbind(x, y)
rbind(x, y)[ind,]
library(RANN)
?knn2
?nn2
x
y
digamma
C <- cov(rbind(x, y))
C
chol(C)
L <- solve(chol(C))
L
solve(L%*%t(L))
C
solve(t(L)%*%L)
colMeans(rbind(x, y))
x <- x - c(-10, 100)
x
x <- x + c(-10, 100)
x
x <- x - t(c(-10, 100))
x - rep(c(-10, 100), each=30)
C <- cov(rbind(x, y))
L <- solve(chol(C))
mu <- colMeans(rbind(x, y))
plot(x)
dim(L)
dim(x)
x%*%L
x <- matrix(rnorm(1000), ncol=2)
x[,2] <- x[,1] + rnorm(500, 0, 0.2)
plot(x)
C <- cov(rbind(x, y))
L <- solve(chol(C))
mu <- colMeans(rbind(x, y))
(x - rep(mu, each=500))%*%L
plot((x - rep(mu, each=500))%*%L)
x <- matrix(rnorm(80), ncol=2)
n <- nrow(x)
m <- nrow(y)
p <- ncol(x)
res <- 0
p
n
m
k
k = 1
?nn2
nn_x <- RANN::nn2(x, x, k=k)
nn_y <- RANN::nn2(y, x, k=k)
nn_x
nn_x <- RANN::nn2(x, k=k)
nn_x
nn_x <- RANN::nn2(x, x, k=k+1) # + 1 to exclude self
nn_x
k = 2
nn_x <- RANN::nn2(x, x, k=k+1) # + 1 to exclude self
nn_y <- RANN::nn2(y, x, k=k)
nn_x
rho <- nn_x$nn.dists[,k+1]
rho
nu  <- nn_y$nn.dists[,k]
nu
res <- p * sum(log(nu) - log(rho))) / n + log(m) - log(n-1)
res <- p * sum(log(nu) - log(rho)) / n + log(m) - log(n-1)
res
plot(nu, rho)
abline(0,1)
log(m) - log(n-1)
digamma(0)
digamma(0.01)
digamma(0.001)
nn_x <- RANN::nn2(x, x, searchtype="radius", radius=eps)
eps = 1.2
nn_x <- RANN::nn2(x, x, searchtype="radius", radius=eps)
nn_x
apply(nn_x, 1, sum)
apply(nn_x$nn.idx, 1, sum)
apply(nn_x$nn.idx, 1, length)
apply(nn_x$nn.idx, 1, function(jj) which(jj == 0)[1])
nn_x <- RANN::nn2(x, x, searchtype="radius", radius=eps, k=n)
nn_y <- RANN::nn2(y, x, searchtype="radius", radius=eps, k=n)
nn_y <- RANN::nn2(y, x, searchtype="radius", radius=eps, k=n-1)
nn_x <- RANN::nn2(x, x, searchtype="radius", radius=eps, k=n)
nn_y <- RANN::nn2(y, x, searchtype="radius", radius=eps, k=m)
nn_y$nn.idx
jj = 1:5
which(jj == 0)
which(jj == 0)[1]
length(nn_x$nn.idx[1,])
apply(nn_x$nn.idx, 1, function(jj){
first_zero <- which(jj == 0)[1]
if(is.na(first_zero)){
res <- length(jj)
}else{
res <- first_zero - 1
}
})
cc = rep("black", 40)
cc[26] <- "red"
plot(x, pch=16, col=cc)
nn_x$nn.idx[26,]
li <- apply(nn_x$nn.idx, 1,
function(jj){
first_zero <- which(jj == 0)[1]
if(is.na(first_zero)){
res <- length(jj)
}else{
res <- first_zero - 1
}
})
li[26]
res <- first_zero - 1
ki <- apply(nn_y$nn.idx, 1,
function(jj){
first_zero <- which(jj == 0)[1]
if(is.na(first_zero)){
res <- length(jj)
}else{
res <- first_zero - 1
}
})
ki
c(li, ki) == 0
any(c(li, ki) == 0)
digamma(li)
li
li <- apply(nn_x$nn.idx, 1,
function(jj){
first_zero <- which(jj == 0)[1]
if(is.na(first_zero)){
res <- length(jj)
}else{
res <- first_zero - 1 - 1 # Extra -1 to exclude self
}
})
li
digamma(li)
digamma(li + 1e-9)
digamma(0.001 + li)
digamma(0.001 + ki)
digamma(1) - digamma(1.001)
log(100) - log(100*1.2)
log(1000) - log(1000*1.2)
k = 1
nn_x <- RANN::nn2(x, x, k=k+1) # + 1 to exclude self
nn_y <- RANN::nn2(y, x, k=k)
nn_x$nn.dists
pmin(1:5, 2:6)
pmin(1:5, 6:2)
k
nn_x$nn.dists[,k+1]
nn_y$nn.dists[,k]
eps_vec <- pmax(nn_x$nn.dists[,k+1], nn_y$nn.dists[,k])
aa = nn_x$nn.dists[,k+1]; bb =  nn_y$nn.dists[,k]
plot(aa, bb)
abline(0, 1)
plot(aa, eps_vec, pch=16)
plot(aa, bb)
abline(0, 1)
points(aa, eps_vec, pch=16)
# Make another pass using eps_vec as radius
apply(x, 2, function(xx) nn2(x, xx, searchtype="radius", radius=eps, k=n))
# Make another pass using eps_vec as radius
apply(x, 2, function(xx) nn2(x, matrix(xx, nrow=1), searchtype="radius", radius=eps, k=n))
x
dim(x)
# Make another pass using eps_vec as radius
apply(x, 1, function(xx) nn2(x, matrix(xx, nrow=1), searchtype="radius", radius=eps, k=n))
# Make another pass using eps_vec as radius
foo = apply(x, 1, function(xx) nn2(x, matrix(xx, nrow=1), searchtype="radius", radius=eps, k=n))
class(foo)
length(foo)
foo[[1]]
xx = x[1,]
i= 1
nn_x_v2 <- nn2(x, matrix(xx, nrow=1), searchtype="radius", radius=eps_vec[i], k=n))
nn_x_v2 <- nn2(x, matrix(xx, nrow=1), searchtype="radius", radius=eps_vec[i], k=n)
nn_x_v2
nn_x_v2 <- nn2(x, matrix(xx, nrow=1), searchtype="radius", radius=eps_vec[i] + 0.001, k=n)
nn_x_v2
nn_x_v2 <- nn2(x, matrix(xx, nrow=1), searchtype="radius", radius=eps_vec[i] * 1.001, k=n)
nn_x_v2
jj <- nn_x_v2$nn.idx
first_zero <- which(jj == 0)[1]
cntx <- first_zero - 2
cntx
nn_x_v2$nn.dists
jj <- nn_x_v2$nn.idx
first_zero <- which(jj == 0)[1]
first_zero
# Make another pass using eps_vec as radius
li <- ki <- rho <- nu <- rep(NA, n)
for(i in 1:n){
xx <- matrix(x[i,], nrow=1)
# Do x vs x
nn_x_v2 <- nn2(x, matrix(xx, nrow=1), searchtype="radius", radius=eps_vec[i] * 1.001, k=n)
jj <- nn_x_v2$nn.idx
first_zero <- which(jj == 0)[1]
li[i] <- first_zero - 1 - 1 # extra -1 to exclude self
rho[i] <- nn_x_v2$nn.dists[,first_zero-1]
# Do x vs y
nn_y_v2 <- nn2(y, matrix(xx, nrow=1), searchtype="radius", radius=eps_vec[i] * 1.001, k=m)
jj <- nn_y_v2$nn.idx
first_zero <- which(jj == 0)[1]
ki[i] <- first_zero - 1
nu[i] <- nn_y_v2$nn.dists[,first_zero-1]
}
nu
rho
p * sum(log(nu) - log(rho)) / n
mean(digamma(li) - digamma(ki))
kld_knn_compute <- function(x, y, automate, k, eps, whiten){
n <- nrow(x)
m <- nrow(y)
p <- ncol(x)
# Equation 30-33
if(whiten){
C <- cov(rbind(x, y))
L <- solve(chol(C))
mu <- colMeans(rbind(x, y))
x <- (x - rep(mu, each=n))%*%L
y <- (y - rep(mu, each=n))%*%L
}
if(automate){
method = 26 # Equation 26
}else{
if(!is.null(k)){
method = 5 # Equation 5
}else{
if(!is.null(eps)){
method = 25 # Equation 25
}else{
stop("When automate is FALSE, k or eps must be specified")
}
}
}
# Fixed k
if(method == 5){
nn_x <- RANN::nn2(x, x, k=k+1) # + 1 to exclude self
nn_y <- RANN::nn2(y, x, k=k)
rho <- nn_x$nn.dists[,k+1]
nu  <- nn_y$nn.dists[,k]
res <- p * sum(log(nu) - log(rho)) / n + log(m) - log(n-1)
return(res)
}
# Fixed epsilon
if(method == 25){
nn_x <- RANN::nn2(x, x, searchtype="radius", radius=eps, k=n)
nn_y <- RANN::nn2(y, x, searchtype="radius", radius=eps, k=m)
li <- apply(nn_x$nn.idx, 1,
function(jj){
first_zero <- which(jj == 0)[1]
if(is.na(first_zero)){
res <- length(jj)
}else{
res <- first_zero - 1 - 1 # Extra -1 to exclude self
}
})
ki <- apply(nn_y$nn.idx, 1,
function(jj){
first_zero <- which(jj == 0)[1]
if(is.na(first_zero)){
res <- length(jj)
}else{
res <- first_zero - 1
}
})
if(any(c(li, ki) == 0)){
warning("no neighbors for at least one point inside radius. Expact erratic estimates.")
term <- mean(digamma(li + 0.001) - digamma(ki + 0.001))
}else{
term <- mean(digamma(li) - digamma(ki))
}
res <- term + log(m) - log(n-1)
return(res)
}
if(method == 26){
nn_x <- RANN::nn2(x, x, k=k+1) # + 1 to exclude self
nn_y <- RANN::nn2(y, x, k=k)
# Get epsilon
eps_vec <- pmax(nn_x$nn.dists[,k+1], nn_y$nn.dists[,k])
# Make another pass using eps_vec as radius
li <- ki <- rho <- nu <- rep(NA, n)
for(i in 1:n){
xx <- matrix(x[i,], nrow=1)
# Do x vs x
nn_x_v2 <- nn2(x, matrix(xx, nrow=1), searchtype="radius", radius=eps_vec[i] * 1.001, k=n)
jj <- nn_x_v2$nn.idx
first_zero <- which(jj == 0)[1]
li[i] <- first_zero - 1 - 1 # extra -1 to exclude self
rho[i] <- nn_x_v2$nn.dists[,first_zero-1]
# Do x vs y
nn_y_v2 <- nn2(y, matrix(xx, nrow=1), searchtype="radius", radius=eps_vec[i] * 1.001, k=m)
jj <- nn_y_v2$nn.idx
first_zero <- which(jj == 0)[1]
ki[i] <- first_zero - 1
nu[i] <- nn_y_v2$nn.dists[,first_zero-1]
}
# Compute estimator eq 29
res <- p * sum(log(nu) - log(rho)) / n
res <- res + mean(digamma(li) - digamma(ki))
res <- res + log(m) - log(n-1)
return(res)
}
}
kld_nn_compute(x, y,TRUE, k=1, whiten = TRUE)
kld_knn_compute(x, y,TRUE, k=1, whiten = TRUE)
x[,2] <- x[,1] + rnorm(300, 0, 0.5)
x <- matrix(rnorm(2*300), ncol=2)
x[,2] <- x[,1] + rnorm(300, 0, 0.5)
plot(x)
y <- matrix(rnorm(2*300, 0, 0.8), ncol=2)
plot(x, pch=16, color="dodgerblue")
plot(x, pch=16, col="dodgerblue")
points(y, col='orange')
x <- matrix(rnorm(2*300), ncol=2)
x[,2] <- 0.2*x[,1] + rnorm(300, 0, 0.8)
y <- matrix(rnorm(2*300, 0, 0.8), ncol=2)
plot(x, pch=16, col="dodgerblue")
points(y, col='orange')
x <- matrix(rnorm(2*500), ncol=2)
x[,2] <- 0.2*x[,1] + rnorm(500, 0, 0.8)
y <- matrix(rnorm(2*500, 0, 0.8), ncol=2)
plot(x, pch=16, col="dodgerblue")
points(y, col='orange')
x <- matrix(rnorm(2*500), ncol=2)
x[,2] <- 0.4*x[,1] + rnorm(500, 0, 0.6)
y <- matrix(rnorm(2*500, 0, 0.8), ncol=2)
plot(x, pch=16, col="dodgerblue")
points(y, col='orange')
x <- matrix(rnorm(2*500), ncol=2)
x[,2] <- 0.4*x[,1] + rnorm(500, 0, 0.6)
y <- matrix(rnorm(2*500, 0, 0.8), ncol=2)
plot(x, pch=16, col="dodgerblue")
points(y, col='orange')
automate = TRUE
k=NULL
eps = NULL
whiten = TRUE
n <- nrow(x)
y <- matrix(rnorm(2*450, 0, 0.8), ncol=2)
plot(x, pch=16, col="dodgerblue")
points(y, col='orange')
n <- nrow(x)
m <- nrow(y)
p <- ncol(x)
n
m
p
# Equation 30-33
if(whiten){
C <- cov(rbind(x, y))
L <- solve(chol(C))
mu <- colMeans(rbind(x, y))
x <- (x - rep(mu, each=n))%*%L
y <- (y - rep(mu, each=n))%*%L
}
C <- cov(rbind(x, y))
L <- solve(chol(C))
mu <- colMeans(rbind(x, y))
x <- (x - rep(mu, each=n))%*%L
y <- (y - rep(mu, each=n))%*%L
y <- (y - rep(mu, each=m))%*%L
plot(x)
plot(y)
if(automate){
method = 26 # Equation 26
}else{
if(!is.null(k)){
method = 5 # Equation 5
}else{
if(!is.null(eps)){
method = 25 # Equation 25
}else{
stop("When automate is FALSE, k or eps must be specified")
}
}
}
method
nn_x <- RANN::nn2(x, x, k=k+1) # + 1 to exclude self
k
if(is.null(k)) k <- 1
nn_x <- RANN::nn2(x, x, k=k+1) # + 1 to exclude self
nn_y <- RANN::nn2(y, x, k=k)
nn_x
# Get epsilon
eps_vec <- pmax(nn_x$nn.dists[,k+1], nn_y$nn.dists[,k])
# Make another pass using eps_vec as radius
li <- ki <- rho <- nu <- rep(NA, n)
for(i in 1:n){
xx <- matrix(x[i,], nrow=1)
# Do x vs x
nn_x_v2 <- nn2(x, matrix(xx, nrow=1), searchtype="radius", radius=eps_vec[i] * 1.001, k=n)
jj <- nn_x_v2$nn.idx
first_zero <- which(jj == 0)[1]
li[i] <- first_zero - 1 - 1 # extra -1 to exclude self
rho[i] <- nn_x_v2$nn.dists[,first_zero-1]
# Do x vs y
nn_y_v2 <- nn2(y, matrix(xx, nrow=1), searchtype="radius", radius=eps_vec[i] * 1.001, k=m)
jj <- nn_y_v2$nn.idx
first_zero <- which(jj == 0)[1]
ki[i] <- first_zero - 1
nu[i] <- nn_y_v2$nn.dists[,first_zero-1]
}
nu
rho
plot(rho, nu)
plot(nu/rho)
abline(h=1, col='red')
hist(nu/rho-1)
p * sum(log(nu) - log(rho)) / n
res + mean(digamma(li) - digamma(ki))
# Compute estimator eq 29
res <- p * sum(log(nu) - log(rho)) / n
mean(digamma(li) - digamma(ki))
res <- res + mean(digamma(li) - digamma(ki))
log(m) - log(n-1)
# Compute estimator eq 29
res <- p * sum(log(nu) - log(rho)) / n
res <- res + mean(digamma(li) - digamma(ki))
res <- res + log(m) - log(n-1)
res
x <- matrix(rnorm(2*500), ncol=2)
x[,2] <- 0.4*x[,1] + rnorm(500, 0, 0.6)
y <- matrix(rnorm(2*450, 0, 0.8), ncol=2)
plot(x, pch=16, col="dodgerblue")
points(y, col='orange')
# Compute estimator eq 29
res <- p * sum(log(nu) - log(rho)) / n
res <- res + mean(digamma(li) - digamma(ki))
res <- res + log(m) - log(n-1)
res
if(is.null(k)) k <- 1
nn_x <- RANN::nn2(x, x, k=k+1) # + 1 to exclude self
nn_y <- RANN::nn2(y, x, k=k)
# Get epsilon
eps_vec <- pmax(nn_x$nn.dists[,k+1], nn_y$nn.dists[,k])
# Make another pass using eps_vec as radius
li <- ki <- rho <- nu <- rep(NA, n)
for(i in 1:n){
xx <- matrix(x[i,], nrow=1)
# Do x vs x
nn_x_v2 <- nn2(x, matrix(xx, nrow=1), searchtype="radius", radius=eps_vec[i] * 1.001, k=n)
jj <- nn_x_v2$nn.idx
first_zero <- which(jj == 0)[1]
li[i] <- first_zero - 1 - 1 # extra -1 to exclude self
rho[i] <- nn_x_v2$nn.dists[,first_zero-1]
# Do x vs y
nn_y_v2 <- nn2(y, matrix(xx, nrow=1), searchtype="radius", radius=eps_vec[i] * 1.001, k=m)
jj <- nn_y_v2$nn.idx
first_zero <- which(jj == 0)[1]
ki[i] <- first_zero - 1
nu[i] <- nn_y_v2$nn.dists[,first_zero-1]
}
# Compute estimator eq 29
res <- p * sum(log(nu) - log(rho)) / n
res <- res + mean(digamma(li) - digamma(ki))
res <- res + log(m) - log(n-1)
res
devtools::document()
devtools::document()
devtools::document()
?kld_knn
kld_knn(x, y, TRUE)
devtools::document()
devtools::document()
devtools:document()
devtools::document()
kld_knn(x, y, TRUE)
kld_knn(x, y, TRUE, k=1)
kld_knn(x, y, TRUE, k=2)
kld_knn(x, y, TRUE, k=3)
kld_knn(x, y, TRUE, k=3, type=2)
kld_knn(x, y, FALSE, k=5)
kld_knn(x, y, TRUE, k=3, whiten=TRUE, type=2)
kld_knn(x, y, TRUE, k=3, whiten=TRUE, type=4, lambda=0.6, n_mc=10)
kld_knn(x, y, FALSE, eps = 3)
kld_knn(x, y, FALSE, eps = 1.2)
kld_knn(x, y, FALSE, eps = 1.5)
kld_knn(x, y, FALSE, eps = 1.3)
kld_knn(x, y, FALSE, eps = 1.24)
kld_knn(x, y, FALSE, eps = 1.23)
kld_knn(x, y, FALSE, eps = 1.25)
devtools::document()
