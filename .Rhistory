curve(dgamma(x, ALPHA, BETA), add=TRUE,
lwd=2, col='dodgerblue', lty=3)
curve(dgamma(x, ALPHA+1, BETA), add=TRUE,
lwd=2, lty=2, col='firebrick')
ALPHA <- 4
BETA  <- 2
kap <- 1
x <- regamma(10000, ALPHA, BETA, kap)
hist(x, breaks=40, freq=F, xlim=c(0, 7), ylim=c(0, 0.6))
curve(degamma(x, ALPHA, BETA, kap), add=TRUE,
lwd=2, col='orange')
curve(dgamma(x, ALPHA, BETA), add=TRUE,
lwd=2, col='dodgerblue', lty=3)
curve(dgamma(x, ALPHA+1, BETA), add=TRUE,
lwd=2, lty=2, col='firebrick')
par(mfrow=c(1,1))
alpha <- 3
beta <- 2
kappa <- 1
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
bob <- RColorBrewer::brewer.pal(5, "Set1")
xx <- regamma(10000, alpha, beta, kappa)
hist(xx, freq=FALSE, breaks=40, xlim=c(0, 7), ylim=c(0, 0.7),
main = paste0("kappa = ", round(kappa, 3), ", lambda = ", round(lambda, 3)))
curve(degamma(x, alpha, beta, kappa),
lwd=2, lty=1, col=bob[1],
add=TRUE)
curve(dgamma(x, alpha, beta),
lwd=2, lty=2, col=bob[2],
add=TRUE)
curve(dgamma(x, alpha+lambda, beta),
lwd=2, lty=3, col=bob[3],
add=TRUE)
alpha <- 3
beta <- 2
kappa <- 0.5
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
bob <- RColorBrewer::brewer.pal(5, "Set1")
xx <- regamma(10000, alpha, beta, kappa)
hist(xx, freq=FALSE, breaks=40, xlim=c(0, 7), ylim=c(0, 0.7),
main = paste0("kappa = ", round(kappa, 3), ", lambda = ", round(lambda, 3)))
curve(degamma(x, alpha, beta, kappa),
lwd=2, lty=1, col=bob[1],
add=TRUE)
curve(dgamma(x, alpha, beta),
lwd=2, lty=2, col=bob[2],
add=TRUE)
curve(dgamma(x, alpha+lambda, beta),
lwd=2, lty=3, col=bob[3],
add=TRUE)
kappa <- 0.1
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
bob <- RColorBrewer::brewer.pal(5, "Set1")
xx <- regamma(10000, alpha, beta, kappa)
hist(xx, freq=FALSE, breaks=40, xlim=c(0, 7), ylim=c(0, 0.7),
main = paste0("kappa = ", round(kappa, 3), ", lambda = ", round(lambda, 3)))
curve(degamma(x, alpha, beta, kappa),
lwd=2, lty=1, col=bob[1],
add=TRUE)
curve(dgamma(x, alpha, beta),
lwd=2, lty=2, col=bob[2],
add=TRUE)
curve(dgamma(x, alpha+lambda, beta),
lwd=2, lty=3, col=bob[3],
add=TRUE)
alpha <- 3
beta <- 2
kappa <- 1000
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
bob <- RColorBrewer::brewer.pal(5, "Set1")
xx <- regamma(10000, alpha, beta, kappa)
hist(xx, freq=FALSE, breaks=40, xlim=c(0, 7), ylim=c(0, 0.7),
main = paste0("kappa = ", round(kappa, 3), ", lambda = ", round(lambda, 3)))
curve(degamma(x, alpha, beta, kappa),
lwd=2, lty=1, col=bob[1],
add=TRUE)
curve(dgamma(x, alpha, beta),
lwd=2, lty=2, col=bob[2],
add=TRUE)
curve(dgamma(x, alpha+lambda, beta),
lwd=2, lty=3, col=bob[3],
add=TRUE)
alpha <- 3
beta <- 2
kappa <- 1
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
bob <- RColorBrewer::brewer.pal(5, "Set1")
xx <- regamma(10000, alpha, beta, kappa)
hist(xx, freq=FALSE, breaks=40, xlim=c(0, 7), ylim=c(0, 0.7),
main = paste0("kappa = ", round(kappa, 3), ", lambda = ", round(lambda, 3)))
curve(degamma(x, alpha, beta, kappa),
lwd=2, lty=1, col=bob[1],
add=TRUE)
curve(dgamma(x, alpha, beta),
lwd=2, lty=2, col=bob[2],
add=TRUE)
curve(dgamma(x, alpha+lambda, beta),
lwd=2, lty=3, col=bob[3],
add=TRUE)
curve(dgamma(x, alpha+1, beta),
lwd=2, lty=4, col=bob[4],
add=TRUE)
hist(xx, freq=FALSE, breaks=40, xlim=c(0, 7), ylim=c(0, 0.7),
main = paste0("kappa = ", round(kappa, 3), ", lambda = ", round(lambda, 3)))
curve(degamma(x, alpha, beta, kappa),
lwd=2, lty=1, col=bob[1],
add=TRUE)
curve(dgamma(x, alpha, beta),
lwd=2, lty=2, col=bob[2],
add=TRUE)
curve(dgamma(x, alpha+1, beta),
lwd=2, lty=4, col=bob[4],
add=TRUE)
curve(dgamma(x, alpha+lambda, beta),
lwd=2, lty=3, col=bob[3],
add=TRUE)
megamma(1, alpha, beta, kappa)
(alpha+lambda)/beta
library(concordance)
?borehole
n <- 500
X <- matrix(runif(7*n), ncol=7)
y <- apply(X, 1, concordance::borehole())
n <- 500
X <- matrix(runif(7*n), ncol=7)
y <- apply(X, 1, concordance::borehole())
borehole
X
dim(X)
borehole(X[1,])
borehole(X[2,])
y <- apply(X, 2, concordance::borehole())
n <- 500
X <- matrix(runif(7*n), ncol=7)
y <- apply(X, 1, concordance::borehole())
y <- apply(X, 1, concordance::borehole)
y
mod <- bass(X, y)
mod <- bass(X, y)
library(BASS)
mod <- bass(X, y)
C   <- C_bass(mod)
C
eigen(C)
eigen(C)
plot(eigen(C))
plot(eigen(C)$values)
plot(sqrt(eigen(C)$values))
plot(sqrt(abs(eigen(C)$values)))
500^3 * 2
500^3 * 2*4
#' @name egamma
#' @rdname egamma
#'
#' @title Extended Gamma Distribution
#'
#' #' The EGamma(alpha, beta, kappa) is best described by its CDF which has the form F(x) = wF_1(x) + (1-w)F_2(x)
#' where w = beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha) > 1. F_1 is the CDF of a gamma(alpha, beta) distribution
#' and F_2 is the CDF of a gamma(alpha, beta + kappa) distribution.
#'
#' @param x a vector of length p
#' @param q a vector of quantiles
#' @param p a vector of probabilities
#' @param n number of observations. If `length(n) > 1`, the length is taken to be the number required.
#' @param k the moment desired
#' @param alpha shape of the gamma distribution
#' @param beta rate of the gamma distribution
#' @param kappa extension parameter (positive)
#' @param log logical. Should density/probability be returned on a log scale?
#' @param lower.tail logical; if TRUE (default) probabilities are P(X <= x), otherwise P(X > x).
#' @param ... optional additional arguments passed to `optim()`
#' @details `degamma` returns the density, `pegamma` returns the distribution function, `qegamma` returns the quantile function, `regamma` generates random samples (using inverse transform) and `megamma` returns the moments of the distribution.
#' @params
NULL
#' @rdname funcs
#' @examples
#' n <- 100 #Number of observations
#' X <- regamma(n, 3, 1, 2)
#' hist(X, breaks=20, freq=FALSE)
#' curve(degamma(x, 3, 1, 2), add=TRUE)
#' @export
degamma <- function(x, alpha, beta, kappa, log=FALSE){
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
d <- w*dgamma(x, alpha, beta) + (1-w)*dgamma(x, alpha, beta + kappa)
if(log){
return(log(d))
}else{
return(d)
}
}
#' @rdname funcs
#' @examples
pegamma <- function(q, alpha, beta, kappa, log=FALSE, lower.tail=TRUE){
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
p <- w*pgamma(q, alpha, beta) + (1-w)*pgamma(q, alpha, beta + kappa)
p <- p + (1 - 2*p)*(1-lower.tail)
if(log){
return(log(p))
}else{
return(p)
}
}
#' @rdname funcs
#' @examples
qegamma <- function(p, alpha, beta, kappa, ...){
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
l <- pmin(qgamma(p, alpha, beta), 0)
u <- qgamma(1 - (1-p)/w, alpha, beta)
f2opt <- function(zz, pp) (pegamma(zz, alpha, beta, kappa) - pp)^2
q <- rep(NA, length(p))
for(i in seq_along(p)){
if(p[i] <= 0){
q[i] <- 0
}else{
if(p[i] > 1){
q[i] <- 1
}else{
q[i] <- optim((l[i]+u[i])/2, fn=f2opt,
method="Brent", lower=l[i], upper = u[i],
pp = p[i], ...)$par
}
}
}
return(q)
}
#' @rdname funcs
#' @examples
regamma <- function(n, alpha, beta, kappa, ...){
if(length(n) > 1) n <- length(n)
u <- runif(n)
x <- qegamma(u, alpha, beta, kappa, ...)
return(x)
}
#' @rdname funcs
#' @examples
megamma <- function(k=1, alpha, beta, kappa, ...){
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
term1 <- gamma(alpha + k)/gamma(alpha)/beta^k
term2 <- w*(1-((w-1)/w)^(k/alpha + 1))
return(term1*term2)
}
library(quack)
library(quack)
?regamma
quack::regamma
library(devtools)
library(roxygen2)
document()
document()
document()
document()
document()
?regamma
document()
?regamma
knitr::opts_chunk$set(echo = TRUE)
library(quack)
alpha <- 3
beta <- 2
kappa <- 1
x <- regamma(10000, alpha, beta, kappa)
hist(x, freq=FALSE, breaks=40)
alpha <- 3
beta <- 2
kappa <- 1
x <- regamma(10000, alpha, beta, kappa)
hist(x, freq=FALSE, breaks=40)
curve(degamma(x, alpha, beta, kappa), add=TRUE, lwd=2, col="orange")
alpha <- 3
beta <- 2
kappa <- 1
x <- regamma(10000, alpha, beta, kappa)
hist(x, freq=FALSE, breaks=40, main=expression(paste(kappa, " = 1")))
curve(degamma(x, alpha, beta, kappa), add=TRUE, lwd=2, col="orange")
curve(dgamma(x, alpha, beta) add=TRUE, lwd=2, col="dodgerblue")
alpha <- 3
beta <- 2
kappa <- 1
x <- regamma(10000, alpha, beta, kappa)
hist(x, freq=FALSE, breaks=40, main=expression(paste(kappa, " = 1")))
curve(degamma(x, alpha, beta, kappa), add=TRUE, lwd=2, col="orange")
curve(dgamma(x, alpha, beta), add=TRUE, lwd=2, col="dodgerblue")
curve(dgamma(x, alpha+1, beta), add=TRUE, lwd=2, col="firebrick")
alpha <- 3
beta <- 2
kappa <- 1
x <- regamma(10000, alpha, beta, kappa)
hist(x, freq=FALSE, breaks=40, main=expression(paste(kappa, " = 1")))
curve(degamma(x, alpha, beta, kappa), add=TRUE, lwd=3, col="orange")
curve(dgamma(x, alpha, beta), add=TRUE, lwd=3, col="dodgerblue")
curve(dgamma(x, alpha+1, beta), add=TRUE, lwd=3, col="firebrick")
alpha <- 3
beta <- 2
kappa <- 1
x <- regamma(10000, alpha, beta, kappa)
hist(x, freq=FALSE, breaks=40, main=expression(paste(kappa, " = 1")))
curve(degamma(x, alpha, beta, kappa), add=TRUE, lwd=3, col="orange")
curve(dgamma(x, alpha, beta), add=TRUE, lwd=3, col="dodgerblue")
curve(dgamma(x, alpha+1, beta), add=TRUE, lwd=3, col="firebrick")
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
curve(dgamma(x, alpha+lambda, beta), add=TRUE, lwd=3, lty=3, col="burntorange")
alpha <- 3
beta <- 2
kappa <- 1
x <- regamma(10000, alpha, beta, kappa)
hist(x, freq=FALSE, breaks=40, main=expression(paste(kappa, " = 1")))
curve(degamma(x, alpha, beta, kappa), add=TRUE, lwd=3, col="orange")
curve(dgamma(x, alpha, beta), add=TRUE, lwd=3, col="dodgerblue")
curve(dgamma(x, alpha+1, beta), add=TRUE, lwd=3, col="firebrick")
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
curve(dgamma(x, alpha+lambda, beta), add=TRUE, lwd=3, lty=3, col="sienna")
alpha <- 3
beta <- 2
kappa <- 1
x <- regamma(10000, alpha, beta, kappa)
hist(x, freq=FALSE, breaks=40, main=expression(paste(kappa, " = 1")))
curve(degamma(x, alpha, beta, kappa), add=TRUE, lwd=3, col="orange")
curve(dgamma(x, alpha, beta), add=TRUE, lwd=3, col="dodgerblue")
curve(dgamma(x, alpha+1, beta), add=TRUE, lwd=3, col="firebrick")
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
curve(dgamma(x, alpha+lambda, beta), add=TRUE, lwd=3, lty=3, col="sienna")
legend("topright", c(expression(paste("Gamma(", alpha, ", ", beta, ")"))), lwd=3, col='dodgerblue)
alpha <- 3
beta <- 2
kappa <- 1
x <- regamma(10000, alpha, beta, kappa)
hist(x, freq=FALSE, breaks=40, main=expression(paste(kappa, " = 1")))
curve(degamma(x, alpha, beta, kappa), add=TRUE, lwd=3, col="orange")
curve(dgamma(x, alpha, beta), add=TRUE, lwd=3, col="dodgerblue")
curve(dgamma(x, alpha+1, beta), add=TRUE, lwd=3, col="firebrick")
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
curve(dgamma(x, alpha+lambda, beta), add=TRUE, lwd=3, lty=3, col="sienna")
legend("topright", c(expression(paste("Gamma(", alpha, ", ", beta, ")"))), lwd=3, col='dodgerblue')
alpha <- 3
beta <- 2
kappa <- 1
x <- regamma(10000, alpha, beta, kappa)
hist(x, freq=FALSE, breaks=40, main=expression(paste(kappa, " = 1")))
curve(degamma(x, alpha, beta, kappa), add=TRUE, lwd=3, col="orange")
curve(dgamma(x, alpha, beta), add=TRUE, lwd=3, col="dodgerblue")
curve(dgamma(x, alpha+1, beta), add=TRUE, lwd=3, col="firebrick")
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
curve(dgamma(x, alpha+lambda, beta), add=TRUE, lwd=3, lty=3, col="sienna")
legend("topright", c(expression(paste("Gamma(", alpha, ", ", beta, ")")),
expression(paste("Gamma(", alpha, "+1, ", beta, ")")),
expression(paste("Gamma(", alpha, "+", lambda, ", ", beta, ")")),
expression(paste("IMGa(", alpha, ", ", beta, ", ", kappa, ")"))),
lwd=3, lty=c(1, 1, 3, 1), col=c("dodgerblue", "firebrick", "sienna", "orange"))
alpha <- 3
beta <- 2
kappa_vec <- c(0.1, 1, 5, 10)
par(mfrow=c(2,2))
for(k in seq_along(kappa_vec)){
kap <- kappa_vec[k]
x <- regamma(10000, alpha, beta, kap)
hist(x, freq=FALSE, breaks=40, main=expression(paste(kappa, " = 1")))
curve(degamma(x, alpha, beta, kappa), add=TRUE, lwd=3, col="orange")
curve(dgamma(x, alpha, beta), add=TRUE, lwd=3, col="dodgerblue")
curve(dgamma(x, alpha+1, beta), add=TRUE, lwd=3, col="firebrick")
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
curve(dgamma(x, alpha+lambda, beta), add=TRUE, lwd=3, lty=3, col="sienna")
legend("topright", c(expression(paste("Gamma(", alpha, ", ", beta, ")")),
expression(paste("Gamma(", alpha, "+1, ", beta, ")")),
expression(paste("Gamma(", alpha, "+", lambda, ", ", beta, ")")),
expression(paste("IMGa(", alpha, ", ", beta, ", ", kappa, ")"))),
lwd=3, lty=c(1, 1, 3, 1), col=c("dodgerblue", "firebrick", "sienna", "orange"))
}
alpha <- 3
beta <- 2
kappa_vec <- c(0.1, 1, 5, 10)
par(mfrow=c(2,2))
for(k in seq_along(kappa_vec)){
kap <- kappa_vec[k]
x <- regamma(10000, alpha, beta, kap)
hist(x, freq=FALSE, breaks=40, main=expression(paste(kappa, " = ", kap)))
curve(degamma(x, alpha, beta, kap), add=TRUE, lwd=3, col="orange")
curve(dgamma(x, alpha, beta), add=TRUE, lwd=3, col="dodgerblue")
curve(dgamma(x, alpha+1, beta), add=TRUE, lwd=3, col="firebrick")
w <- beta^-alpha/(beta^-alpha - (beta + kap)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
curve(dgamma(x, alpha+lambda, beta), add=TRUE, lwd=3, lty=3, col="sienna")
legend("topright", c(expression(paste("Gamma(", alpha, ", ", beta, ")")),
expression(paste("Gamma(", alpha, "+1, ", beta, ")")),
expression(paste("Gamma(", alpha, "+", lambda, ", ", beta, ")")),
expression(paste("IMGam(", alpha, ", ", beta, ", ", kappa, ")"))),
lwd=3, lty=c(1, 1, 3, 1), col=c("dodgerblue", "firebrick", "sienna", "orange"))
}
alpha <- 3
beta <- 2
kappa_vec <- c(0.1, 1, 5, 10)
par(mfrow=c(2,2))
for(k in seq_along(kappa_vec)){
kap <- kappa_vec[k]
x <- regamma(10000, alpha, beta, kap)
hist(x, freq=FALSE, breaks=40, main=expression(paste(kappa, " = ", kap)))
curve(degamma(x, alpha, beta, kap), add=TRUE, lwd=3, col="orange")
curve(dgamma(x, alpha, beta), add=TRUE, lwd=3, col="dodgerblue")
curve(dgamma(x, alpha+1, beta), add=TRUE, lwd=3, col="firebrick")
w <- beta^-alpha/(beta^-alpha - (beta + kap)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
curve(dgamma(x, alpha+lambda, beta), add=TRUE, lwd=3, lty=3, col="sienna")
legend("topright", c(expression(paste("Gamma(", alpha, ", ", beta, ")")),
expression(paste("Gamma(", alpha, "+1, ", beta, ")")),
expression(paste("Gamma(", alpha, "+", lambda, ", ", beta, ")")),
expression(paste("IMGam(", alpha, ", ", beta, ", ", kappa, ")"))),
lwd=3, lty=c(1, 1, 3, 1), col=c("dodgerblue", "firebrick", "sienna", "orange"))
}
library(quack)
knitr::opts_chunk$set(echo = TRUE)
library(quack)
regamma <- function(n, alpha, beta, kappa, ...){
if(length(n) > 1) n <- length(n)
u <- runif(n)
x <- qegamma(u, alpha, beta, kappa, ...)
return(x)
}
degamma <- function(x, alpha, beta, kappa, log=FALSE){
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
d <- w*dgamma(x, alpha, beta) + (1-w)*dgamma(x, alpha, beta + kappa)
if(log){
return(log(d))
}else{
return(d)
}
}
knitr::opts_chunk$set(echo = TRUE)
library(quack)
regamma <- function(n, alpha, beta, kappa, ...){
if(length(n) > 1) n <- length(n)
u <- runif(n)
x <- qegamma(u, alpha, beta, kappa, ...)
return(x)
}
pegamma <- function(q, alpha, beta, kappa, log=FALSE, lower.tail=TRUE){
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
p <- w*pgamma(q, alpha, beta) + (1-w)*pgamma(q, alpha, beta + kappa)
p <- p + (1 - 2*p)*(1-lower.tail)
if(log){
return(log(p))
}else{
return(p)
}
}
qegamma <- function(p, alpha, beta, kappa, ...){
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
l <- pmin(qgamma(p, alpha, beta), 0)
u <- qgamma(1 - (1-p)/w, alpha, beta)
f2opt <- function(zz, pp) (pegamma(zz, alpha, beta, kappa) - pp)^2
q <- rep(NA, length(p))
for(i in seq_along(p)){
if(p[i] <= 0){
q[i] <- 0
}else{
if(p[i] > 1){
q[i] <- 1
}else{
q[i] <- optim((l[i]+u[i])/2, fn=f2opt,
method="Brent", lower=l[i], upper = u[i],
pp = p[i], ...)$par
}
}
}
return(q)
}
degamma <- function(x, alpha, beta, kappa, log=FALSE){
w <- beta^-alpha/(beta^-alpha - (beta + kappa)^-alpha)
d <- w*dgamma(x, alpha, beta) + (1-w)*dgamma(x, alpha, beta + kappa)
if(log){
return(log(d))
}else{
return(d)
}
}
alpha <- 3
beta <- 2
kappa_vec <- c(0.1, 1, 5, 10)
par(mfrow=c(2,2))
for(k in seq_along(kappa_vec)){
kap <- kappa_vec[k]
x <- regamma(10000, alpha, beta, kap)
hist(x, freq=FALSE, breaks=40, main=paste(expression(paste(kappa, " = ")), kap))
curve(degamma(x, alpha, beta, kap), add=TRUE, lwd=3, col="orange")
curve(dgamma(x, alpha, beta), add=TRUE, lwd=3, col="dodgerblue")
curve(dgamma(x, alpha+1, beta), add=TRUE, lwd=3, col="firebrick")
w <- beta^-alpha/(beta^-alpha - (beta + kap)^-alpha)
lambda <- alpha*w*(1 - ((w-1)/w)^(1/alpha + 1)) - alpha
curve(dgamma(x, alpha+lambda, beta), add=TRUE, lwd=3, lty=3, col="sienna")
legend("topright", c(expression(paste("Gamma(", alpha, ", ", beta, ")")),
expression(paste("Gamma(", alpha, "+1, ", beta, ")")),
expression(paste("Gamma(", alpha, "+", lambda, ", ", beta, ")")),
expression(paste("IMGam(", alpha, ", ", beta, ", ", kappa, ")"))),
lwd=3, lty=c(1, 1, 3, 1), col=c("dodgerblue", "firebrick", "sienna", "orange"))
}
library(GBASS)
?qbass
motorcyle
mcycle
MASS::motorcycle
1e3
?Density
?density
